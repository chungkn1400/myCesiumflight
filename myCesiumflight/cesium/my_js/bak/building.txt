// A demo of interactive 3D Tiles styling
// Styling language Documentation: https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling
// Building data asset openstreetmap
// to load with sandcastle interactive demo showcase
var viewer = new Cesium.Viewer("cesiumContainer", {
  terrainProvider: Cesium.createWorldTerrain(),
});

viewer.scene.globe.depthTestAgainstTerrain = true;

var flags = {
    looking : false,
    moveForward : false,
    moveBackward : false,
    vk_shift : false,
    moveUp : false,
    moveDown : false,
    moveLeft : false,
    moveRight : false
};

// HTML overlay for showing feature name
var nameOverlay = document.createElement("div");
viewer.container.appendChild(nameOverlay);
nameOverlay.className = "backdrop";
nameOverlay.style.display = "block";
nameOverlay.style.position = "absolute";
nameOverlay.style.bottom = "0";
nameOverlay.style.left = "0";
nameOverlay.style["pointer-events"] = "none";
nameOverlay.style.padding = "4px";
nameOverlay.style.backgroundColor = "black";

nameOverlay.textContent = "name";
function setauxvar(aux){nameOverlay.textContent="click here "+String(aux);}
setauxvar("ok");

function getFlagForKeyCode(keyCode) {
    switch (keyCode) {
	case 0x25:
	    return 'lookleft';
	case 0x27:
	    return 'lookright';
	case 0x28:
        return 'lookdown';
	case 0x26:
	    return 'lookup';		
    case 0x20:
        return 'moveForward';
    case 0x10:
        return 'vk_shift';
    case 'N'.charCodeAt(0):
        return 'moveForward';
    case 'B'.charCodeAt(0):
        return 'moveBackward';
    case 'W'.charCodeAt(0):
        return 'moveForward';
    case 'S'.charCodeAt(0):
        return 'moveBackward';
    case 'Q'.charCodeAt(0):
        return 'moveUp';
    case 'E'.charCodeAt(0):
        return 'moveDown';
    case 'D'.charCodeAt(0):
        return 'moveRight';
    case 'A'.charCodeAt(0):
        return 'moveLeft';
    default:
        return undefined;
    }
}

document.addEventListener('keydown', function(e) {
    var flagName = getFlagForKeyCode(e.keyCode);
    if (typeof flagName !== 'undefined') {
        flags[flagName] = true;
    }
}, false);

document.addEventListener('keyup', function(e) {
    var flagName = getFlagForKeyCode(e.keyCode);
    if (typeof flagName !== 'undefined') {
        flags[flagName] = false;
    }
}, false);


// Set the initial camera view to look at Manhattan
var initialPosition = Cesium.Cartesian3.fromDegrees(
  -74.01881302800248,
  40.69114333714821,
  753
);
var initialOrientation = new Cesium.HeadingPitchRoll.fromDegrees(
  21.27879878293835,
  -21.34390550872461,
  0.0716951918898415
);
viewer.scene.camera.setView({
  destination: initialPosition,
  orientation: initialOrientation,
  endTransform: Cesium.Matrix4.IDENTITY,
});

// Load the NYC buildings tileset.
//var tileset = new Cesium.Cesium3DTileset({
//  url: Cesium.IonResource.fromAssetId(75343),
//});
var tileset = viewer.scene.primitives.add(
  new Cesium.Cesium3DTileset({
    url: Cesium.IonResource.fromAssetId(96188),
  })
);
viewer.scene.primitives.add(tileset);

// Color buildings based on their height.
function subcolor() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    color: {
       conditions: [
        //["('${height}'!==''?Number(${height}):0)>90", "rgb(99, 9, 8)"],
        ["Number(${height})>140", "rgb(99, 99, 8)"],
        ["Number(${height})>80", "rgb(9, 99, 98)"],
        ["${building}==='commercial'", "rgb(97, 99, 188)"],
        ["${building}==='public'", "rgb(190, 190, 188)"],
        ["true", "rgb(97, 189, 188)"],
      ],
    },
  });
}
subcolor();
function subheight(dh) {
  tileset.style = new Cesium.Cesium3DTileStyle({
    //show: "Number(${height}) > "+String(dh),
    show: "('${height}'!==''?Number(${height}):0)>"+String(dh),
    color: {
       conditions: [
        //["('${height}'!==''?Number(${height}):0)>90", "rgb(99, 9, 8)"],
        ["${building}==='commercial'", "rgb(97, 99, 188)"],
        ["${building}==='public'", "rgb(190, 190, 188)"],
        ["${building}==='hospital'", "rgb(190, 90, 88)"],
        ["Number(${height})>140", "rgb(99, 99, 8)"],
        ["Number(${height})>80", "rgb(9, 99, 98)"],
        ["true", "rgb(97, 189, 188)"],
      ],
    },

  });
}
subheight(9);
/*function colorByHeight() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    color: {
      conditions: [
        ["${Height} >= 300", "rgba(45, 0, 75, 0.5)"],
        ["${Height} >= 200", "rgb(102, 71, 151)"],
        ["${Height} >= 100", "rgb(170, 162, 204)"],
        ["${Height} >= 50", "rgb(224, 226, 238)"],
        ["${Height} >= 25", "rgb(252, 230, 200)"],
        ["${Height} >= 10", "rgb(248, 176, 87)"],
        ["${Height} >= 5", "rgb(198, 106, 11)"],
        ["true", "rgb(127, 59, 8)"],
      ],
    },
  });
}

// Color buildings by their latitude coordinate.
function colorByLatitude() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    defines: {
      latitudeRadians: "radians(${Latitude})",
    },
    color: {
      conditions: [
        ["${latitudeRadians} >= 0.7125", "color('purple')"],
        ["${latitudeRadians} >= 0.712", "color('red')"],
        ["${latitudeRadians} >= 0.7115", "color('orange')"],
        ["${latitudeRadians} >= 0.711", "color('yellow')"],
        ["${latitudeRadians} >= 0.7105", "color('lime')"],
        ["${latitudeRadians} >= 0.710", "color('cyan')"],
        ["true", "color('blue')"],
      ],
    },
  });
}

// Color buildings by distance from a landmark.
function colorByDistance() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    defines: {
      distance:
        "distance(vec2(radians(${Longitude}), radians(${Latitude})), vec2(-1.291777521, 0.7105706624))",
    },
    color: {
      conditions: [
        ["${distance} > 0.0012", "color('gray')"],
        [
          "${distance} > 0.0008",
          "mix(color('yellow'), color('red'), (${distance} - 0.008) / 0.0004)",
        ],
        [
          "${distance} > 0.0004",
          "mix(color('green'), color('yellow'), (${distance} - 0.0004) / 0.0004)",
        ],
        ["${distance} < 0.00001", "color('white')"],
        [
          "true",
          "mix(color('blue'), color('green'), ${distance} / 0.0004)",
        ],
      ],
    },
  });
}

// Color buildings with a '3' in their BIN property.
function colorByStringRegex() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    color:
      "(regExp('3').test(String(${BIN}))) ? color('cyan', 0.9) : color('purple', 0.1)",
  });
}

// Show only buildings greater than 200 meters in height.
function hideByHeight() {
  tileset.style = new Cesium.Cesium3DTileStyle({
    show: "${Height} > 200",
  });
}

Sandcastle.addToolbarMenu([
  {
    text: "Color By Height",
    onselect: function () {
      colorByHeight();
    },
  },
  {
    text: "Color By Latitude",
    onselect: function () {
      colorByLatitude();
    },
  },
  {
    text: "Color By Distance",
    onselect: function () {
      colorByDistance();
    },
  },
  {
    text: "Color By Name Regex",
    onselect: function () {
      colorByStringRegex();
    },
  },
  {
    text: "Hide By Height",
    onselect: function () {
      hideByHeight();
    },
  },
]);

colorByHeight();
*/

var camera = viewer.scene.camera;
var o1=0.0,o2=0.0,o3=0.0,x=0.0,y=0.0,z=0.0,trun=1,timer=0,timer0=0,dtimer=0,timer2=0;
var oo1=0,oo2=0,oo3=0,hmin=9,altz=0,altz0=0;
var ellipsoid = viewer.scene.globe.ellipsoid;

function subrun(){
  if(trun){trun=0;}else{trun=1;}
}
function cameralookRight(do1){o1+=do1*2;oo1=1;}
function cameralookUp(do2){o2-=do2;oo2=1;}
function myloop(){
    var lookFactor = 0.35;
    if (flags.lookright) {
         cameralookRight(lookFactor);}
    if (flags.lookleft) {
        cameralookRight(-lookFactor);}
    if (flags.lookup) {
         cameralookUp(lookFactor);}
    if (flags.lookdown) {
        cameralookUp(-lookFactor);}
     if (flags.vk_shift) {
         subrun();    }
    
    // Change movement speed based on the distance of the camera to the surface of the ellipsoid.
    var cameraHeight = ellipsoid.cartesianToCartographic(camera.position).height;
    var moveRate = 1.5 + (cameraHeight / 100.0)*3000.0/(3000.0+cameraHeight);
    altz=cameraHeight;

    if (trun) {
        camera.moveForward(moveRate);
    }
    if (flags.moveForward) {
        camera.moveForward(moveRate);
    }
    if (flags.moveBackward) {
        camera.moveBackward(moveRate);
    }
    if (flags.moveUp) {
        camera.moveUp(moveRate);
    }
    if (flags.moveDown) {
        camera.moveDown(moveRate);
    }
    if (flags.moveLeft) {
        camera.moveLeft(moveRate);
    }
    if (flags.moveRight) {
        camera.moveRight(moveRate);
    }

if (oo1||oo2||oo3) {
oo1=0;oo2=0;oo3=0;  
if(o2>180){o2=0;o1+=180;}
if(o2<-180){o2=0;o1+=180;}
if(o1>360){o1-=360;}
if(o1<-360){o1+=360;}
initialOrientation = Cesium.HeadingPitchRoll.fromDegrees(
  o1,o2,o3
);

//initialPosition=camera.position;

viewer.scene.camera.setView({
  //destination: initialPosition,
  orientation: initialOrientation,
  endTransform: Cesium.Matrix4.IDENTITY,
});
}

}

o1= 29.27879878293835;
o2=-14.34390550872461;
o3=0.0;

initialPosition = Cesium.Cartesian3.fromDegrees(
  -74.01881302800248,
  40.69114333714821,
  753
);
initialOrientation = Cesium.HeadingPitchRoll.fromDegrees(
  o1,o2,o3
);

viewer.scene.camera.setView({
  destination: initialPosition,
  orientation: initialOrientation,
  endTransform: Cesium.Matrix4.IDENTITY,
});

function mydir(){
  if(o1>180){o1-=360;}
  if(o1<-180){o1+=360;}
  if(o1>(90+45+22)){return " E ";}
  if(o1>(90+45-22)){return " N.E ";}
  if(o1>(90-22)){return " N ";}
  if(o1>(45-22)){return " N.W ";}
  if(o1>(-22)){return " W ";}
  if(o1>(-45-22)){return " S.W ";}
  if(o1>(-90-22)){return " S ";}
  if(o1>(-90-45-22)){return " S.E ";}
  return " E ";
}

viewer.clock.onTick.addEventListener(function(clock) {
myloop();
timer0=timer;
timer=(new Date().getTime());
dtimer+=(timer-timer0-dtimer)*0.03;
if(dtimer>10000){dtimer=1000;}
setauxvar(mydir()+String(altz));
if(timer>(timer2+3000)){
  timer2=timer;
  if((dtimer>700)&&(hmin<80)){hmin=hmin+10;subheight(hmin);}
  if((dtimer<200)&&(hmin>-1)){hmin=hmin-10;subheight(hmin);}
}
});
